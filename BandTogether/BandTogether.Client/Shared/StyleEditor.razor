@inject BlazorDataModel Model
@implements IDisposable

<table class="mb-2 pad-sides">
    <tbody>
        <tr>
            <td style="width:auto;" colspan="3">
                <label class="small">
                    <Radzen.Blazor.RadzenLabel Text="@Text.FontFamily" Component="DropDownFontFamily" />
                </label>
            </td>

            <td style="width:1%;" class="no-wrap">
                <label for="style-FontColor" class="small">@Text.FontColor</label>
            </td>

            <td style="width:1%;" class="no-wrap">
                <label class="small">@Text.FontStyle</label>
            </td>

            <td style="width:1%;" class="no-wrap">
                <label class="small">@Text.Alignment</label>
            </td>

            <td style="width:1%;" class="no-wrap"></td>
        </tr>

        <tr class="mb-3">
            <td colspan="3">
                <Radzen.Blazor.RadzenDropDown @bind-Value="@FontFamily"
                        Data="@Fonts"
                        TextProperty="Name"
                        ValueProperty="Name"
                        Style="@FontListingStyle"
                        Name="DropDownFontFamily" >
                    <Template>
                        <span class="ff-@((context as FontListing)?.Name.Replace(" ", "-").ToLower())">@((context as FontListing)?.Name)</span>
                    </Template>
                    <ValueTemplate>
                        @((context as FontListing)?.Name)
                    </ValueTemplate>
                </Radzen.Blazor.RadzenDropDown>
            </td>
            
            <td>
                <Radzen.Blazor.RadzenColorPicker id="style-FontColor"
                        @bind-Value="Value.fontColor"
                        ShowHSV="true"
                        ShowRGBA="true"
                        ShowColors="true"
                        ShowButton="true"
                        Change="@((args) => {Value.fontColor = args; ValueHasChanged(); })" />
            </td>
            
            <td>
                <div class="btn-group" role="group">
                    <button type="button" title="@Text.Bold"
                            class="me-1 btn btn-sm @(Helpers.BooleanValue(Value.fontBold) ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.fontBold = !Helpers.BooleanValue(Value.fontBold); ValueHasChanged(); })">
                        <Icon Name="Bold" />
                    </button>
                    <button type="button" title="@Text.Italic"
                            class="btn btn-sm @(Helpers.BooleanValue(Value.fontItalic) ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.fontItalic = !Helpers.BooleanValue(Value.fontItalic); ValueHasChanged(); })">
                        <Icon Name="Italic" />
                    </button>
                </div>
            </td>

            <td style="width:1%;" class="no-wrap">
                <div class="btn-group ms-2" role="group">
                    <button type="button" title="@Text.AlignmentLeft"
                            class="btn btn-sm @(Value.textAlign == "left" ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.textAlign = "left"; ValueHasChanged(); })">
                        <Icon Name="AlignLeft" />
                    </button>
                    <button type="button" title="@Text.AlignmentCenter"
                            class="btn btn-sm @(Value.textAlign == "center" ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.textAlign = "center"; ValueHasChanged(); })">
                        <Icon Name="AlignCenter" />
                    </button>
                    <button type="button" title="@Text.AlignmentRight"
                            class="btn btn-sm @(Value.textAlign == "right" ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.textAlign = "right"; ValueHasChanged(); })">
                        <Icon Name="AlignRight" />
                    </button>
                </div>
            </td>

            <td>
            @if (ShowSongOptions) {
                <div class="btn-group ms-2" role="group">
                    <button type="button" title="@Text.AlignmentTop"
                            class="btn btn-sm @(Value.verticalAlign == "top" ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.verticalAlign = "top"; ValueHasChanged(); })">
                        <Icon Name="AlignTop" />
                    </button>
                    <button type="button" title="@Text.AlignmentMiddle"
                            class="btn btn-sm @(Value.verticalAlign == "middle" ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.verticalAlign = "middle"; ValueHasChanged(); })">
                        <Icon Name="AlignMiddle" />
                    </button>
                    <button type="button" title="@Text.AlignmentBottom"
                            class="btn btn-sm @(Value.verticalAlign == "bottom" ? " btn-dark" : "btn-light")"
                            @onclick="@(() => { Value.verticalAlign = "bottom"; ValueHasChanged(); })">
                        <Icon Name="AlignBottom" />
                    </button>
                </div>
            }
            </td>
        </tr>

        <tr>
            <td class="no-wrap">
                <label for="style-FontSize" class="small">@Text.FontSize (@Value.fontSize)</label>
            </td>

            <td class="no-wrap">
                <label for="style-FontLineHeight" class="small">@Text.FontLineHeight (@Value.fontLineHeight)</label>
            </td>

            <td class="no-wrap">
                <label for="style-FontOutlineWidth" class="small">@Text.FontOutline (@Value.fontOutlineWidth)</label>
            </td>

            <td>
                @if (Value.fontOutlineWidth > 0)
                {
                    <label for="style-FontOutlineColor" class="small">@Text.FontOutlineColor</label>
                }
            </td>

            <td>
                <label for="style-TextShadow" class="small">@Text.FontShadow</label>
            </td>
        </tr>

        <tr>
            <td>
                <input type="range" class="form-range" id="style-FontSize" min="10" max="800" @bind="Value.fontSize" @bind:after="ValueHasChanged" />
            </td>

            <td>
                <input type="range" id="style-FontLineHeight" class="form-range" min="0.5" max="3.0" step=".05" @bind="Value.fontLineHeight" @bind:after="ValueHasChanged" />
            </td>

            <td>
                <input type="range" class="form-range" id="style-FontOutlineWidth" min="0" max="400" @bind="Value.fontOutlineWidth" @bind:after="ValueHasChanged" />
            </td>


            <td>
                @if (Value.fontOutlineWidth > 0)
                {
                    <Radzen.Blazor.RadzenColorPicker 
                            id="style-FontOutlineColor"
                            @bind-Value="Value.fontOutlineColor"
                            ShowHSV="true"
                            ShowRGBA="true"
                            ShowColors="true"
                            ShowButton="true"
                            Change="@((args) => {Value.fontOutlineColor = args; ValueHasChanged(); })" />
                }
            </td>

            <td>
                <div class="mb-2 form-check form-switch">
                    <input type="checkbox" id="style-TextShadow" role="switch" class="form-check-input" @bind="Value.fontShadow" @bind:after="ValueHasChanged" />
                </div>
            </td>
        </tr>

        @if (Helpers.BooleanValue(Value.fontShadow)) {
            <tr class="mt-3">
                <td>
                    <label for="style-FontShadowOffsetX" class="small">@Text.FontShadowOffsetX (@Value.fontShadowOffsetX)</label>
                </td>

                <td>
                    <label for="style-FontShadowOffsetY" class="small">@Text.FontShadowOffsetY (@Value.fontShadowOffsetY)</label>
                </td>

                <td>
                    <label for="style-FontShadowBlur" class="small">@Text.FontShadowBlur (@Value.fontShadowBlur)</label>
                </td>

                <td>
                    <label for="style-FontShadowColor" class="small">@Text.FontShadowColor</label>
                </td>
            </tr>

            <tr>
                <td>
                    <input type="range" id="style-FontShadowOffsetX" class="form-range" min="-100" max="100" @bind="Value.fontShadowOffsetX" @bind:after="ValueHasChanged" />
                </td>

                <td>
                    <input type="range" id="style-FontShadowOffsetY" class="form-range" min="-100" max="100" @bind="Value.fontShadowOffsetY" @bind:after="ValueHasChanged" />
                </td>

                <td>
                    <input type="range" class="form-range" id="style-FontShadowBlur" min="0" max="100" @bind="Value.fontShadowBlur" @bind:after="ValueHasChanged" />
                </td>

                <td>
                    <Radzen.Blazor.RadzenColorPicker 
                        id="style-FontShadowColor"
                        @bind-Value="Value.fontShadowColor"
                        ShowHSV="true"
                        ShowRGBA="true"
                        ShowColors="true"
                        ShowButton="true"
                        Change="@((args) => {Value.fontShadowColor = args; ValueHasChanged(); })" />
                </td>
            </tr>
        }

        <tr>
            <td colspan="7">
                <label for="style-Opacity" class="small">@Text.Opacity (@Value.opacity)</label>
            </td>
        </tr>
        <tr>
            <td colspan="7">
                <input type="range" class="form-range" id="style-Opacity" min="0" max="1" step=".01" @bind="Value.opacity" @bind:after="ValueHasChanged" />
            </td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter] public bool ShowSongOptions { get; set; } = false;
    [Parameter] public textStyle Value { get; set; } = null!;
    [Parameter] public EventCallback<textStyle> ValueChanged { get; set; }

    public void Dispose() { }

    protected void ValueHasChanged()
    {
        ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }

    protected string FontFamily {
        get { return Helpers.StringValue(Value.fontFamily); }
        set {
            Value.fontFamily = value;
            ValueHasChanged();
        }
    }

    protected string FontListingStyle {
        get {
            string output = "width:100%; font-family:'" + Value.fontFamily + "';";
            return output;
        }
    }

    protected List<FontListing> Fonts {
        get {
            return Model.AvailableFonts.Select(f => new FontListing { Name = f }).ToList();
        }
    }

    protected class FontListing {
        public string Name { get; set; } = "";
    }
}