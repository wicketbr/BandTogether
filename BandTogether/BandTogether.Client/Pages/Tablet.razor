@page "/Tablet"
@inject BlazorDataModel Model

<PageTitle>@Text.TabletView - @Text.AppName</PageTitle>

<style>
    @((MarkupString)_css)
</style>

<div class="tablet-wrapper">
    @if (Model.Loaded) {
        if (Model.LoggedIn) {
            <div class="jumbotron tablet-toolbar">
                <button type="button" class="btn btn-sm btn-primary" @onclick="Logout">
                    @Model.User.name
                </button>

                <button type="button" class="btn btn-sm @(Model.User.preferences.autoFollow? "btn-success" : "btn-danger")"
                        @onclick="ToggleAutoFollow">
                    @if (Model.User.preferences.autoFollow) {
                        <span>@Text.AutoFollowOn</span>
                    } else {
                        <span>@Text.AutoFollowOff</span>
                    }
                </button>

                @if (_currentItemType == setListItemType.sheetmusic && _sheetmusic != null) {
                    if (SheetMusicItem != null) {
                        string partTitle = !String.IsNullOrWhiteSpace(SheetMusicPart) ? SheetMusicPart : Text.SheetMusicSelectPart;

                        <button type="button"
                                class="ms-1 btn btn-sm btn-secondary dropdown-toggle"
                                data-toggle="dropdown"
                                role="button"
                                id="dropdownMenuPart"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            @partTitle
                        </button>
                        <ul class="dropdown-menu dopdown-menu-part" aria-labelledby="dropdownMenuPart">
                            @foreach (var part in SheetMusicItem.parts) {
                                <li>
                                    <a href="javascript:void('0');"
                                       class="dropdown-item @(SheetMusicPart == part ? "active" : "")"
                                            @onclick="@(() => SheetMusicPartSelected(part))">
                                        @part
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                } else if (_currentItemType == setListItemType.song) {
                    <div class="ms-1 btn-group" role="group">
                        <button type="button" class="btn btn-sm btn-secondary" @onclick="ZoomOut">
                            <Icon Name="ZoomOut" />
                        </button>

                        <button type="button" class="btn btn-sm btn-secondary" @onclick="ZoomIn">
                            <Icon Name="ZoomIn" />
                        </button>

                        <button type="button" class="btn btn-sm btn-secondary" @onclick="ZoomReset">
                            <Icon Name="ZoomReset" />
                        </button>
                    </div>

                    <button type="button" class="ms-1 btn btn-sm @(Model.User.preferences.hideChords ? "btn-danger" : "btn-success")"
                            @onclick="ToggleChords">
                        @Text.Chords
                    </button>

                    if (!Model.User.preferences.hideChords) {
                        <button type="button"
                                class="ms-1 btn btn-sm btn-secondary dropdown-toggle"
                                data-toggle="dropdown"
                                role="button"
                                id="dropdownMenuButtonCapo"
                                data-bs-toggle="dropdown"
                                aria-expanded="false">
                            @((MarkupString)CapoText(Capo))
                        </button>
                        <ul class="dropdown-menu dopdown-menu-capo" aria-labelledby="dropdownMenuButtonCapo">
                            @for (int x = 0; x <= 12; x++) {
                                int capoValue = x;
                                <li>
                                    <a href="javascript:void('0');"
                                       class="dropdown-item @(capoValue == Capo ? "active" : "")"
                                       @onclick="@(() => CapoChanged(capoValue))">
                                        @((MarkupString)CapoLabel(capoValue))
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                }

                <button type="button"
                        class="btn btn-sm btn-secondary dropdown-toggle"
                        data-toggle="dropdown"
                        role="button"
                        id="dropdownMenuButtonTheme"
                        data-bs-toggle="dropdown"
                        aria-expanded="false">
                    <span title="@Text.Theme: @CurrentThemeLabel">@((MarkupString)CurrentThemeIcon)</span>
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButtonTheme">
                    <li>
                        <a class="dropdown-item @(Model.User.preferences.theme == "" ? "active" : "")" href="javascript:void('0');" @onclick="@(() => Helpers.SetUserTheme(Model.User, ""))">
                            <Icon Name="ThemeAuto" /> @Text.ThemeAuto
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item @(Model.User.preferences.theme == "light" ? "active" : "")" href="javascript:void('0');" @onclick="@(() => Helpers.SetUserTheme(Model.User, "light"))">
                            <Icon Name="ThemeLight" /> @Text.ThemeLight
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item @(Model.User.preferences.theme == "dark" ? "active" : "")" href="javascript:void('0');" @onclick="@(() => Helpers.SetUserTheme(Model.User, "dark"))">
                            <Icon Name="ThemeDark" /> @Text.ThemeDark
                        </a>
                    </li>
                </ul>
            </div>

            if (_setList.items.Any()) {
                switch(_currentItemType) {
                    case setListItemType.sheetmusic:
                        if (_sheetmusic != null) {
                            if (!String.IsNullOrWhiteSpace(SheetMusicPart)) {
                                string pdfUrl = Model.ApplicationUrl + "sheetmusic/" + _sheetmusic.title + "/" + SheetMusicPart + ".pdf";

                                <RenderPDF Class="sheet-music-pdf" Id="render-pdf" PdfUrl="@pdfUrl" />
                            } else {
                                @Text.SheetMusicSelectPart
                            }
                        }
                        break;

                    case setListItemType.song:
                        if (_song != null) {
                            string matrixKey = String.Empty;

                            if (Capo == 12) {
                                matrixKey = Helpers.StringValue(SongKeyTransposed);
                                Helpers.ShowChordsAsNashvilleNumbers = true;
                            } else {
                                matrixKey = Helpers.TransposeKey(SongKeyTransposed, 12 - Capo);
                                Helpers.ShowChordsAsNashvilleNumbers = false;
                            }

                            <div class="song-title">@_song.title</div>

                            if (!String.IsNullOrWhiteSpace(_song.artist)) {
                                <div class="song-author">@_song.artist</div>
                            }

                            <div id="zoomable-area">
                                @if (!Model.User.preferences.hideChords) {
                                    if (!String.IsNullOrWhiteSpace(SongKeyTransposed)) {
                                        <div class="song-key">@Text.SongKey @SongKeyTransposed</div>
                                    }

                                    if (Capo > 0 && Capo < 12) {
                                        <div class="song-capo">@Text.Capo @Helpers.NumberToRomanNumerals(Capo)</div>
                                    }
                                }

                                @if (_song.parts != null && _song.parts.Any()) {
                                    Helpers.UsingDoReMi = Helpers.SongUsesDoReMiSystem(_song);
                                    Helpers.UsingNashvilleNumbering = Helpers.SongUsesNashvilleNumberingSystem(_song);

                                    NashvilleNumbering.Init(matrixKey, Minor ? "minor" : "major");

                                    foreach (var part in _song.parts.Index()) {
                                        var elementId = "tablet-song-part-" + part.Index.ToString();

                                        <div id="tablet-scroll-target-@part.Index" class="tablet-scroll-target"></div>

                                        <div id="@elementId" class="tablet-song-part @(part.Index == _setList.activeItemPart ? "active" : "")">
                                            @if (!part.Item.partOfPrevious) {
                                                <div class="song-element">@part.Item.label</div>
                                            }
                                            <div>
                                                @if (Helpers.ShowChordsAsNashvilleNumbers) {
                                                    @((MarkupString)Helpers.RenderSongElement(_song, part.Item, _song.key))
                                                } else {
                                                    @((MarkupString)Helpers.RenderSongElement(_song, part.Item, matrixKey))
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <div id="after-song-padding"></div>
                        }
                        break;

                    default:
                        <div>@Text.WaitingForSetlist</div>
                        break;
                }
            } else {
                <div>@Text.WaitingForSetlist</div>
            }
        } else {
            <div class="ms-2 me-2 mt-5 row">
                <div class="col col-12 col-sm-1 col-md-2 col-lg-3 col-xl-4 col-xxl-4"></div>

                <div class="col col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4 col-xxl-4">
                    <h1>
                        @Text.SelectUser
                    </h1>

                    @foreach (var item in Model.Users.Where(x => x.id != Guid.Empty && x.enabled == true).OrderBy(x => x.name)) {
                        <div class="mb-1">
                            <button type="button" class="btn btn-sm btn-success user-button" @onclick="@(() => SelectedUser(item))">
                                @if (item.enabled) {
                                    <span>@item.name</span>
                                } else {
                                    <em>@item.name</em>
                                }
                            </button>
                        </div>
                    }
                </div>

                <div class="col col-12 col-sm-1 col-md-2 col-lg-3 col-xl-4 col-xxl-4"></div>
            </div>
        }

        if (Model.MessageItems.tabletMessage.active && !String.IsNullOrWhiteSpace(Model.MessageItems.tabletMessage.text)) {
            var msg = Model.MessageItems.tabletMessage.text.Replace(Environment.NewLine, "<br />");
            var style = !String.IsNullOrWhiteSpace(Model.MessageItems.tabletMessage.style) ? Model.MessageItems.tabletMessage.style : "red";

            <div class="tablet-message @style">
                <span class="tablet-message-text">@((MarkupString)msg)</span>
            </div>
        } else {
            // No message being show, so if the active item in the set list is not the item being shown here show that as a message.
            if (_setList.items.Any()) {
                var activeItem = _setList.items.FirstOrDefault(x => x.id == _setList.activeItem);
                if (activeItem != null) {
                    string itemMessage = String.Empty;

                    switch(activeItem.type) {
                        case setListItemType.clock:
                            itemMessage = Text.Clock;
                            break;

                        case setListItemType.countdown:
                            var countdown = Tools.SetListItemAsCountdown(activeItem);
                            if (countdown != null) {
                                if (countdown.countdownType == "seconds") {
                                    itemMessage = Text.Countdown + " " + countdown.seconds.ToString() + " " + Text.Seconds;
                                } else if (countdown.toTime.HasValue) {
                                    itemMessage = Text.CountdownTo + " " + countdown.toTime.Value.ToString();
                                }
                            }
                            break;

                        case setListItemType.image:
                            var image = Tools.SetListItemAsImage(activeItem);
                            if (image != null) {
                                if (!String.IsNullOrWhiteSpace(image.name)) {
                                    itemMessage = Text.Image + " " + image.name;
                                } else if (!String.IsNullOrWhiteSpace(image.filename)) {
                                    itemMessage = Text.Image + " " + image.filename;
                                }
                            }
                            break;

                        case setListItemType.sheetmusic:
                        case setListItemType.song:
                            // These would be shown on the tablet.
                            break;

                        case setListItemType.slideshow:
                            var slideshow = Tools.SetListItemAsSlideshow(activeItem);
                            if (slideshow != null) {
                                itemMessage = Text.Slideshow + " " + slideshow.folder;
                                if (_setList.activeItemPart.HasValue && slideshow.images != null && slideshow.images.Count > 1) {
                                    itemMessage += " (" + (_setList.activeItemPart.Value + 1).ToString() + "/" + slideshow.images.Count.ToString() + ")";
                                }
                            }
                            break;

                        case setListItemType.video:
                            var video = Tools.SetListItemAsVideo(activeItem);
                            if (video != null) {
                                itemMessage = Text.Video + " " + video.filename;
                            }
                            break;

                        case setListItemType.youTube:
                            itemMessage = Text.YouTubeVideo;
                            break;
                    }

                    if (!String.IsNullOrWhiteSpace(itemMessage)) {
                        <div class="tablet-message blue">
                            <span class="tablet-message-text">@((MarkupString)itemMessage)</span>
                        </div>
                    }
                }
            }
        }
    }
</div>

@code {
    protected string _css = String.Empty;
    protected string _currentItemType = String.Empty;
    protected bool _loaded = false;
    protected string _matrixKey = String.Empty;
    protected song? _nextSong = null;
    protected string _pageName = "tablet";
    protected song? _previousSong = null;
    protected setList _setList = new setList();
    protected sheetMusicItem? _sheetmusic = new sheetMusicItem();
    protected song? _song = null;

    protected Guid? _activeItem = null;
    protected int? _activeItemPart = null;
    protected Guid? _selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        if (!Model.Subscribers_OnChange.Contains(_pageName)) {
            Model.Subscribers_OnChange.Add(_pageName);
            Model.OnChange += OnDataModelUpdated;
        }

        if (!Model.Subscribers_OnSignalRSetList.Contains(_pageName)) {
            Model.Subscribers_OnSignalRSetList.Add(_pageName);
            Model.OnSignalRSetList += ProcessSignalRSetList;
        }

        Model.View = _pageName;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_song != null) {
            await Helpers.ResetPadding();
        }

        if (Model.Loaded && !_loaded) {
            _loaded = true;

            // We are going to use our own local copy of the set list.
            // That way, if we are not auto-following the model updates won't affect our view.
            if (Model.SetList.items.Count == 0) {
                await Helpers.LoadCachedMessages();
                await Helpers.LoadCachedSetList();
            }
            _setList = Model.SetList;

            if (_setList.items.Any()) {
                var selectedItem = _setList.items.FirstOrDefault(x => x.id == _setList.activeItem);

                if (selectedItem == null) {
                    // Just show the first song in the list.
                    selectedItem = _setList.items.FirstOrDefault(x => x.type == setListItemType.song);
                } else {
                    if (selectedItem.type == setListItemType.song || selectedItem.type == setListItemType.sheetmusic) {
                        // This is OK, as these will display on the tablet.
                    } else {
                        // Just show the first song in the list.
                        selectedItem = _setList.items.FirstOrDefault(x => x.type == setListItemType.song);
                    }
                }

                if (selectedItem != null) {
                    var song = Tools.SetListItemAsSong(selectedItem);
                    if (song != null) {
                        if (song.parts == null || song.parts.Count == 0) {
                            song = Helpers.GetSong(song.id, song.songBookId);
                            if (song != null) {
                                song.parts = Tools.SongParts(song.content);
                            }
                        }

                        if (song != null) {
                            _currentItemType = setListItemType.song;

                            _song = song;

                            _activeItem = selectedItem.id;
                            _activeItemPart = 0;
                            _selectedItem = selectedItem.id;

                            Model.Song = song;
                            await Helpers.ResetPadding();
                        }
                    }
                }
            }

            RenderCSS();
        }
    }

    protected void OnDataModelUpdated()
    {
        if (Model.View == _pageName) {
            StateHasChanged();
            RenderCSS();
        }
    }

    protected int Capo
    {
        get {
            int output = 0;

            if (_song != null) {
                var pref = Model.User.preferences.songPreferences.FirstOrDefault(x => x.songId == _song.id);
                if (pref != null && pref.capo > 0) {
                    output = pref.capo;
                }
            }

            return output;
        }
    }

    protected void CapoChanged(int capo)
    {
        if (_song != null && _song.id != Guid.Empty) {
            var pref = Model.User.preferences.songPreferences.FirstOrDefault(x => x.songId == _song.id);
            if (pref != null) {
                pref.capo = capo;
                pref.title = Helpers.StringValue(_song.title);
            } else {
                Model.User.preferences.songPreferences.Add(new songPreferences {
                        songBookId = _song.songBookId,
                        songId = _song.id,
                        capo = capo,
                        title = Helpers.StringValue(_song.title),
                        userId = Model.User.id,
                    });
            }

            StateHasChanged();
        }
    }

    protected string CapoLabel(int capo)
    {
        if (capo == 0){
            return Text.NoCapo;
        } else if (capo == 12) {
            return "<div class=\"nns-label\">" + Text.NashvilleNumbers + "</div>";
        } else {
            string output = "<div class=\"capo-label\">" + Text.Capo + " <strong>" + Helpers.NumberToRomanNumerals(capo) + "</strong></div>"; ;

            if (!String.IsNullOrWhiteSpace(SongKeyTransposed)) {
                var newKey = Helpers.TransposeKey(SongKeyTransposed, 12 - capo);

                if (!String.IsNullOrWhiteSpace(newKey)) {
                    output += " to play in <strong>" + newKey + "</strong>";
                }
            }

            return output;
        }
    }

    protected string CapoText(int capo)
    {
        string output = String.Empty;

        if (capo == 0) {
            output = Text.NoCapo;
        } else if (capo == 12) {
            output = Text.NashvilleNumbers;
        } else {
            output = Helpers.NumberToRomanNumerals(capo);

            if (!String.IsNullOrWhiteSpace(_song?.key)) {
                var newKey = Helpers.TransposeKey(_song?.key, 12 - capo);
                if (!String.IsNullOrWhiteSpace(newKey)) {
                    output += " to play in " + newKey;
                }
            }
        }

        return output;
    }

    protected string CurrentThemeIcon {
        get {
            string output = Helpers.CurrentThemeIconForUser(Model.User);
            return output;
        }
    }

    protected string CurrentThemeLabel {
        get {
            string output = Helpers.CurrentThemeLabelForUser(Model.User);
            return output;
        }
    }

    protected async Task Logout()
    {
        await Helpers.ClearLocalStorageItem("UserId");
        Model.User = new user();
        StateHasChanged();
    }

    protected bool Minor {
        get {
            if (SongKeyTransposed.Contains("m") || SongKeyTransposed.Contains("minor")) {
                return true;
            }

            return false;
        }
    }

    protected async void ProcessSignalRSetList(setList setList)
    {
        // We will update our local copy of the set list, but not the active items unless we are auto-following.
        RenderCSS();

        _setList.items = setList.items;
        _activeItem = setList.activeItem;
        _activeItemPart = setList.activeItemPart;
        _selectedItem = setList.selectedItem;

        if (Model.User.preferences.autoFollow) {
            await UpdateSetList();
        }

        StateHasChanged();
    }

    protected void RenderCSS()
    {
        var output = new System.Text.StringBuilder();

        output.AppendLine("#zoomable-area {");
        output.AppendLine("  transform-origin: top left;");
        output.AppendLine("  display: inline-block;");
        output.AppendLine("  transform: scale(" + (Model.User.preferences.zoom / 100.0) + ");");
        output.AppendLine("}");

        var style = Model.Settings.messageStyleTablet;
        if (style != null) {
            output.AppendLine(".tablet-message-text {");
            output.AppendLine("  font-family:\"" + style.fontFamily + "\";");
            output.AppendLine("  font-size:" + (style.fontSize * Model.FontBaseMultiplier) + "vw;");
            output.AppendLine("}");
        }

        _css = output.ToString();
        StateHasChanged();
    }

    protected async Task SelectedUser(user user)
    {
        await Helpers.SetLocalStorageItem("UserId", user.id);
        user.preferences.cultureCode = Model.User.preferences.cultureCode;
        Model.User = user;
    }

    protected sheetMusic? SheetMusicItem {
        get {
            sheetMusic? output = null;

            if (_sheetmusic != null) {
                output = Model.DataLoader.sheetMusic.FirstOrDefault(x => x.title == _sheetmusic.title);
            }

            return output;
        }
    }

    protected string SheetMusicPart {
        get {
            string output = String.Empty;

            if (SheetMusicItem != null) {
                var userPref = Model.User.preferences.sheetMusicPreferences.FirstOrDefault(x => x.title == SheetMusicItem.title);
                if (userPref != null) {
                    output = userPref.part;
                }
            }

            return output;
        }
    }

    protected void SheetMusicPartSelected(string part)
    {
        if (_sheetmusic != null) {
            var userPref = Model.User.preferences.sheetMusicPreferences.FirstOrDefault(x => x.title == _sheetmusic.title);
            if (userPref != null) {
                userPref.part = part;
            } else {
                Model.User.preferences.sheetMusicPreferences.Add(new sheetMusicPreference {
                    title = _sheetmusic.title,
                    part = part,
                });
            }

            StateHasChanged();
        }
    }

    protected string SongOriginalKey {
        get {
            string output = String.Empty;

            if (_song != null && !String.IsNullOrWhiteSpace(_song.key)) {
                output = _song.key;
            }

            return output;
        }
    }

    protected string SongKeyTransposed {
        get {
            string output = String.Empty;

            if (_song != null && !String.IsNullOrWhiteSpace(_song.key)) {
                output = _song.key;
            }

            // See if this is being transposed.
            var setListItem = _setList.items.FirstOrDefault(x => x.id == _activeItem);
            if (setListItem != null && !String.IsNullOrWhiteSpace(setListItem.transpose)) {
                output= setListItem.transpose;
            }

            return output;
        }
    }

    protected async Task ToggleAutoFollow(){
        Model.User.preferences.autoFollow = !Model.User.preferences.autoFollow;
        StateHasChanged();

        if (Model.User.preferences.autoFollow) {
            await UpdateSetList();
        }
    }

    protected void ToggleChords(){
        Model.User.preferences.hideChords = !Model.User.preferences.hideChords;
        StateHasChanged();
    }

    protected async Task UpdateSetList()
    {
        _setList.activeItem = _activeItem;
        _setList.activeItemPart = _activeItemPart;
        _setList.selectedItem = _selectedItem;

        // Console.WriteLine("UpdateSetList: " + _setList.activeItem.ToString() + " - " + _setList.activeItemPart.ToString() + " - " + _selectedItem.ToString());

        // We also will only update what song we are viewing if the active item is a song or sheet music.
        var selectedItem = _setList.items.FirstOrDefault(x => x.id == _activeItem);
        if (selectedItem != null) {
            switch (selectedItem.type) {
                case setListItemType.sheetmusic:
                    _currentItemType = setListItemType.sheetmusic;
                    var sheetmusic = Tools.SetListItemAsSheetMusic(selectedItem);
                    if (sheetmusic != null) {
                        _sheetmusic = sheetmusic;
                        StateHasChanged();
                    }
                    break;

                case setListItemType.song:
                    _currentItemType = setListItemType.song;
                    var song = Tools.SetListItemAsSong(selectedItem);
                    if (song != null) {
                        Model.Song = song;
                        _song = song;
                        StateHasChanged();

                        await Helpers.ResetPadding();

                        if (_setList.activeItemPart.HasValue) {
                            if (_setList.activeItemPart.Value == 0) {
                                await Helpers.ScrollToTop();
                            } else {
                                await Helpers.ScrollToElement("tablet-scroll-target-" + _setList.activeItemPart.ToString());
                            }
                        }
                    }
                    break;
            }
        }
    }

    protected void ZoomIn()
    {
        if (Model.User.preferences.zoom < Model.ZoomMax) {
            Model.User.preferences.zoom += 5;
            RenderCSS();
        }
    }

    protected void ZoomOut()
    {
        if (Model.User.preferences.zoom > Model.ZoomMin) {
            Model.User.preferences.zoom -= 5;
            RenderCSS();
        }
    }

    protected void ZoomReset()
    {
        Model.User.preferences.zoom = 100;
        RenderCSS();
    }
}
